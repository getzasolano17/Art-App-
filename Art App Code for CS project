from tkinter import *
from tkinter.colorchooser import askcolor
from PIL import ImageGrab


class FilenamePopup():
    def __init__(self, master):
        self.root = Toplevel(master)
        self.lbl = Label(self.root, text="Choose a file name:")
        self.lbl.pack()
        self.ent_filename = Entry(self.root)
        self.ent_filename.pack()
        self.btn_ok = Button(self.root, text='Ok', command=self.cleanup)
        self.btn_ok.pack()

    def cleanup(self):
        self.filename = self.ent_filename.get()
        self.root.destroy()

class Paint(object):

    DEFAULT_PEN_SIZE = 5.0
    DEFAULT_COLOR = 'Black'
    DEFAULT_ERASER = 'white'
    #eraser is default to the same color as the bakcground automatically. 

    def __init__(self):
        self.root = Tk()

        self.pen_button = Button(self.root, text='pen', command=self.use_pen)
        self.pen_button.grid(row=0, column=0)

        self.brush_button = Button(self.root, text='brush', command=self.use_brush)
        self.brush_button.grid(row=0, column=1)

        self.color_button = Button(self.root, text='color', command=self.choose_color)
        self.color_button.grid(row=0, column=2)

        self.eraser_button = Button(self.root, text='eraser', command=self.use_eraser)
        self.eraser_button.grid(row=0, column=3)

        self.choose_size_button = Scale(self.root, from_=1, to=30, orient=HORIZONTAL)
        self.choose_size_button.grid(row=0, column=4)

        self.save_button = Button(self.root, text='Save', command=self.save_screenshot)
        self.save_button.grid(row=0, column=5)
      
        self.c = Canvas(self.root, bg= self.DEFAULT_ERASER, width=600, height=600)
        self.c.grid(row=1, columnspan=6)

        self.setup()
        self.root.mainloop()

    def setup(self):
        self.old_x = None
        self.old_y = None
        self.line_width = self.choose_size_button.get()
        self.color = self.DEFAULT_COLOR
        self.eraser_match = self.DEFAULT_ERASER
        self.eraser_on = False
        self.active_button = self.pen_button
        self.c.bind('<B1-Motion>', self.paint)
        self.c.bind('<ButtonRelease-1>', self.reset)

    def use_pen(self):
        self.activate_button(self.pen_button)

    def use_brush(self):
        self.activate_button(self.brush_button)
        self.line_width = self.choose_size_button.get()
  
    def choose_color(self):
        self.eraser_on = False
        self.color = askcolor(color=self.color)[1]

    def use_eraser(self):
        self.activate_button(self.eraser_button, eraser_mode=True)

    def activate_button(self, some_button, eraser_mode=False):
        self.active_button.config(relief=RAISED)
        some_button.config(relief=SUNKEN)
        self.active_button = some_button
        self.eraser_on = eraser_mode

    def paint(self, event):
        self.line_width = self.choose_size_button.get()
        paint = self.DEFAULT_ERASER if self.eraser_on else self.color
        if self.old_x and self.old_y:
            self.c.create_line(self.old_x, self.old_y, event.x, event.y,
                               width=self.line_width, fill = paint,
                               capstyle=ROUND, smooth=TRUE, splinesteps=36)
      
        self.old_x = event.x
        self.old_y = event.y
      
    def reset(self, event):
      self.old_x, self.old_y = None, None

    def save_screenshot(self):
      filename_popup = FilenamePopup(self.root)
      self.root.wait_window(filename_popup.root)
      filename = filename_popup.filename

      if filename:
          screenshot = ImageGrab.grab(bbox=(0,100,600,600))
          screenshot.save(filename + ".png")
          print(f"Screenshot saved as {filename}.png")


if __name__ == '__main__':
    Paint()

